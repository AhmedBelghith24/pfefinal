[
    {
        "title": "Two Sum",
        "problem_header": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:",
        "problem_content": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n  Example 1:\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2:\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\nExample 3:\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n  Constraints:\n2 <= nums.length <= 104\n-109 <= nums[i] <= 109\n-109 <= target <= 109\nOnly one valid answer exists.\n  Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?",
        "solution_code": "python\nclass Solution:\n    def twoSum(self, nums, target):\n        lookup = {}\n        for i, num in enumerate(nums):\n            if target - num in lookup:\n                return [lookup[target - num], i]\n            lookup[num] = i"
    },
    {
        "title": "Add Two Numbers",
        "problem_header": "# Definition for singly-linked list.\n# class ListNode:\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:",
        "problem_content": "You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\n  Example 1:\nInput: l1 = [2,4,3], l2 = [5,6,4]\nOutput: [7,0,8]\nExplanation: 342 + 465 = 807.\nExample 2:\nInput: l1 = [0], l2 = [0]\nOutput: [0]\nExample 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\nOutput: [8,9,9,9,0,0,0,1]\n  Constraints:\nThe number of nodes in each linked list is in the range [1, 100].\n0 <= Node.val <= 9\nIt is guaranteed that the list represents a number that does not have leading zeros.",
        "solution_code": "python\nclass Solution:\n    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:\n        dummy = cur = ListNode(0)\n        carry = 0\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            cur.next = ListNode(carry % 10)\n            cur = cur.next\n            carry //= 10\n        return dummy.next"
    },
    {
        "title": "Median of Two Sorted Arrays",
        "problem_header": "class Solution:\n    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:",
        "problem_content": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\n  Example 1:\nInput: nums1 = [1,3], nums2 = [2]\nOutput: 2.00000\nExplanation: merged array = [1,2,3] and median is 2.\nExample 2:\nInput: nums1 = [1,2], nums2 = [3,4]\nOutput: 2.50000\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n  Constraints:\nnums1.length == m\nnums2.length == n\n0 <= m <= 1000\n0 <= n <= 1000\n1 <= m + n <= 2000\n-106 <= nums1[i], nums2[i] <= 106",
        "solution_code": "python\nclass Solution:\n    def findMedianSortedArrays(self, nums1, nums2):\n        m, n = len(nums1), len(nums2)\n        if m > n:\n            nums1, nums2, m, n = nums2, nums1, n, m\n        i_min, i_max, half_len = 0, m, (m + n + 1) // 2\n        while i_min <= i_max:\n            i = (i_min + i_max) // 2\n            j = half_len - i\n            if i < m and nums2[j-1] > nums1[i]:\n                i_min = i + 1\n            elif i > 0 and nums1[i-1] > nums2[j]:\n                i_max = i - 1\n            else:\n                if i == 0: max_of_left = nums2[j-1]\n                elif j == 0: max_of_left = nums1[i-1]\n                else: max_of_left = max(nums1[i-1], nums2[j-1])\n                if (m + n) % 2 == 1:\n                    return max_of_left\n\n                if i == m: min_of_right = nums2[j]\n                elif j == n: min_of_right = nums1[i]\n                else: min_of_right = min(nums1[i], nums2[j])\n\n                return (max_of_left + min_of_right) / 2"
    }
]